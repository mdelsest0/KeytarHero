--=============================================================================
--Library Declarations:
--=============================================================================
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use ieee.math_real.all;
library UNISIM;
use UNISIM.VComponents.all;

--=============================================================================
--Entity Declaration:
--=============================================================================
entity MidiVgaScreenPattern is
    port( clk               : in std_logic;
          pixelX, pixelY    : in std_logic_vector(9 downto 0);
          video_on_midi     : in std_logic;
          color             : out std_logic_vector(7 downto 0));
end entity;


architecture behavior of MidiVgaScreenPattern is 
--signals and constants
constant WHITE      : std_logic_vector(7 downto 0) := "11011011";
constant BLACK      : std_logic_vector(7 downto 0) := "00000000";
constant GRAY       : std_logic_vector(7 downto 0) := "01001001";
constant RED       : std_logic_vector(7 downto 0)  := "11100000";

begin
    color_generationProc: process(clk)
    begin
        if rising_edge(clk) then
            if video_on_midi = '1' then 
                if unsigned(pixelX) = 101 and unsigned(pixelY) < 480 then   color <= RED;
                elsif unsigned(pixelY) = 80 then  color <= BLACK;
                elsif unsigned(pixelY) = 100 then color <= BLACK;
                elsif unsigned(pixelY) = 120 then color <= BLACK;
                elsif unsigned(pixelY) = 140 then color <= BLACK;
                elsif unsigned(pixelY) = 160 then color <= BLACK;
                elsif unsigned(pixelY) = 300 then color <= BLACK;
                elsif unsigned(pixelY) = 320 then color <= BLACK;
                elsif unsigned(pixelY) = 340 then color <= BLACK;
                elsif unsigned(pixelY) = 360 then color <= BLACK;
                elsif unsigned(pixelY) = 380 then color <= BLACK;
                else color <= WHITE;
                end if;
           else color <= GRAY;
           end if;
        end if;
     end process color_generationProc;
end behavior;